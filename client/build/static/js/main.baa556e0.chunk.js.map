{"version":3,"sources":["TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTasks","bind","assertThisInitialized","item","_this2","react_default","a","createElement","onClick","delete","key","className","text","class","Date","listItems","entries","map","react_flip_move_es","duration","easing","Component","App","state","items","addItem","deleteItem","e","_inputElement","value","newItem","now","setState","prevState","concat","console","log","preventDefault","filteredItems","filter","onSubmit","id","ref","type","placeholder","aria-label","aria-describedby","TodoItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.baa556e0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport FlipMove from \"react-flip-move\";\nclass TodoItems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createTasks = this.createTasks.bind(this);\n  }\n  createTasks(item) {\n    return (\n      <li\n        onClick={() => this.delete(item.key)}\n        key={item.key}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        {item.text}\n        <span class=\"badge badge-primary badge-pill\">{Date()}</span>\n      </li>\n    );\n  }\n  delete(key) {\n    this.props.delete(key);\n  }\n\n  render() {\n    let todoEntries = this.props.entries;\n    let listItems = todoEntries.map(this.createTasks);\n\n    return (\n      <ul className=\"list-group\">\n        <FlipMove duration={250} easing=\"ease-out\">\n          {listItems}\n        </FlipMove>\n      </ul>\n    );\n  }\n}\nexport default TodoItems;\n","import React, { Component } from \"react\";\nimport TodoItems from \"./TodoItem\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  addItem(e) {\n    if (this._inputElement.value !== \"\") {\n      let newItem = {\n        text: this._inputElement.value,\n        key: Date.now()\n      };\n      this.setState(prevState => {\n        return {\n          items: prevState.items.concat(newItem)\n        };\n      });\n\n      this._inputElement.value = \"\";\n    }\n    console.log(this.state.items);\n\n    e.preventDefault();\n  }\n  deleteItem(key) {\n    var filteredItems = this.state.items.filter(function(items) {\n      return items.key !== key;\n    });\n\n    this.setState({\n      items: filteredItems\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">ToDoLiSt</header>\n        <p>Hint: Click on a list item to remove it.</p>\n        <form onSubmit={this.addItem}>\n          <div className=\"input-group input-group-sm mb-3\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\n                New List Item\n              </span>\n            </div>\n            <input\n              ref={a => (this._inputElement = a)}\n              type=\"text\"\n              placeholder=\"input your texts here !\"\n              className=\"form-control\"\n              aria-label=\"Sizing example input\"\n              aria-describedby=\"inputGroup-sizing-sm\"\n            />\n          </div>\n        </form>\n\n        <div>\n          <TodoItems entries={this.state.items} delete={this.deleteItem} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}